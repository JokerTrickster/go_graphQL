package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"main/src/common/db"
	"main/src/graph/generated"
	"main/src/graph/model"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	userID, _ := primitive.ObjectIDFromHex(id)
	findData := bson.D{{"_id", userID}}
	var user *model.User
	err := db.UserCollection.FindOne(ctx, findData).Decode(&user)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// Users is the resolver for the Users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	cur, err := db.UserCollection.Find(ctx, bson.D{})
	if err != nil {
		return nil, err
	}
	users := make([]*model.User, 0, cur.RemainingBatchLength())
	defer cur.Close(ctx)
	for cur.Next(ctx) {
		var curUser *model.User
		err := cur.Decode(&curUser)
		if err != nil {
			fmt.Println(err)
		}
		users = append(users, curUser)
	}
	return users, nil
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
